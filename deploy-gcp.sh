#!/bin/bash

# ===============================================
# SCRIPT DE DEPLOY PARA GOOGLE CLOUD PLATFORM
# ===============================================

echo "üöÄ Iniciando deploy do Algorise para Google Cloud..."

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Verificar se gcloud est√° instalado
if ! command -v gcloud &> /dev/null; then
    log_error "Google Cloud CLI n√£o est√° instalado!"
    log_info "Instale em: https://cloud.google.com/sdk/docs/install"
    exit 1
fi

# Verificar se est√° autenticado
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" &> /dev/null; then
    log_error "Voc√™ n√£o est√° autenticado no Google Cloud!"
    log_info "Execute: gcloud auth login"
    exit 1
fi

# Verificar se o projeto est√° configurado
PROJECT_ID=$(gcloud config get-value project)
if [[ -z "$PROJECT_ID" ]]; then
    log_error "Projeto Google Cloud n√£o est√° configurado!"
    log_info "Execute: gcloud config set project YOUR_PROJECT_ID"
    exit 1
fi

log_info "Projeto atual: $PROJECT_ID"

# 1. Verificar arquivos necess√°rios
log_info "Verificando arquivos necess√°rios..."

if [[ ! -f "app.yaml" ]]; then
    log_error "Arquivo app.yaml n√£o encontrado!"
    exit 1
fi

if [[ ! -f "composer.json" ]]; then
    log_error "Arquivo composer.json n√£o encontrado!"
    exit 1
fi

if [[ ! -f "composer.lock" ]]; then
    log_warning "Arquivo composer.lock n√£o encontrado! √â recomendado versionar este arquivo para garantir a consist√™ncia das depend√™ncias."
    exit 1
fi

log_success "Arquivos necess√°rios encontrados"

# 2. Instalar depend√™ncias de produ√ß√£o
log_info "Instalando depend√™ncias de produ√ß√£o..."
composer install --no-dev --optimize-autoloader --no-interaction

if [[ $? -ne 0 ]]; then
    log_error "Falha na instala√ß√£o das depend√™ncias!"
    exit 1
fi

log_success "Depend√™ncias instaladas com sucesso"

# 3. Verificar se Cloud SQL est√° configurado
log_info "Verificando configura√ß√£o do Cloud SQL..."

# Extrair connection name do app.yaml
CONNECTION_NAME=$(grep "CLOUD_SQL_CONNECTION_NAME" app.yaml | cut -d'"' -f2)

if [[ "$CONNECTION_NAME" == "your-project-id:us-central1:algorise-db" ]]; then
    log_warning "ATEN√á√ÉO: Configure o CLOUD_SQL_CONNECTION_NAME no app.yaml"
    log_info "Formato: seu-projeto:regi√£o:nome-instancia"
    read -p "Continuar mesmo assim? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Deploy cancelado. Configure o Cloud SQL primeiro."
        exit 1
    fi
fi

# 4. Verificar secrets (opcional)
log_info "Verificando secrets configurados..."

SECRETS=("db-password" "supabase-anon-key" "mail-password")
for secret in "${SECRETS[@]}"; do
    if gcloud secrets describe $secret &> /dev/null; then
        log_success "Secret '$secret' configurado"
    else
        log_warning "Secret '$secret' n√£o encontrado"
        log_info "Configure com: echo 'valor' | gcloud secrets create $secret --data-file=-"
    fi
done

# 5. Fazer backup do .env atual
if [[ -f ".env" ]]; then
    log_info "Fazendo backup do .env atual..."
    cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
    log_success "Backup criado"
fi

# 6. Perguntar sobre dom√≠nio personalizado
log_info "Configura√ß√£o de dom√≠nio..."
echo "Voc√™ quer configurar um dom√≠nio personalizado?"
echo "1) Usar dom√≠nio padr√£o (your-app.uc.r.appspot.com)"
echo "2) Configurar dom√≠nio personalizado"
read -p "Escolha (1/2): " -n 1 -r DOMAIN_CHOICE
echo

# 7. Deploy para App Engine
log_info "Iniciando deploy para App Engine..."
log_warning "Este processo pode levar alguns minutos..."

gcloud app deploy app.yaml --quiet --promote

if [[ $? -ne 0 ]]; then
    log_error "Falha no deploy!"
    
    # Restaurar depend√™ncias de desenvolvimento
    log_info "Restaurando depend√™ncias de desenvolvimento..."
    composer install
    
    exit 1
fi

log_success "Deploy realizado com sucesso!"

# 8. Configurar dom√≠nio personalizado se escolhido
if [[ $DOMAIN_CHOICE == "2" ]]; then
    read -p "Digite seu dom√≠nio (ex: algorise.com): " CUSTOM_DOMAIN
    if [[ ! -z "$CUSTOM_DOMAIN" ]]; then
        log_info "Configurando dom√≠nio personalizado: $CUSTOM_DOMAIN"
        gcloud app domain-mappings create $CUSTOM_DOMAIN --certificate-management=AUTOMATIC
        
        if [[ $? -eq 0 ]]; then
            log_success "Dom√≠nio configurado com sucesso!"
            log_info "Configure seu DNS para apontar para ghs.googlehosted.com"
        else
            log_warning "Falha na configura√ß√£o do dom√≠nio"
        fi
    fi
fi

# 9. Restaurar depend√™ncias de desenvolvimento
log_info "Restaurando depend√™ncias de desenvolvimento..."
composer install

# 10. Mostrar URLs da aplica√ß√£o
log_success "üéâ Deploy conclu√≠do com sucesso!"
echo
log_info "URLs da aplica√ß√£o:"
echo "   üì± App Engine: https://$PROJECT_ID.uc.r.appspot.com"
echo "   üîç Console: https://console.cloud.google.com/appengine?project=$PROJECT_ID"
echo "   üìä Logs: https://console.cloud.google.com/logs/query?project=$PROJECT_ID"

if [[ ! -z "$CUSTOM_DOMAIN" ]]; then
    echo "   üåê Dom√≠nio: https://$CUSTOM_DOMAIN (ap√≥s configurar DNS)"
fi

echo
log_info "Pr√≥ximos passos:"
echo "   1. ‚úÖ Teste a aplica√ß√£o na URL acima"
echo "   2. üîç Monitore os logs para erros"
echo "   3. üîê Configure os secrets se ainda n√£o fez"
echo "   4. üóÑÔ∏è  Importe os dados do banco se necess√°rio"

echo
log_success "üöÄ Algorise est√° no ar!"