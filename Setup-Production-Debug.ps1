# Script para configurar ambiente de debug com produ√ß√£o
# Este script:
# 1. Conecta ao sistema de produ√ß√£o via SSH
# 2. Inicia aplica√ß√£o local conectada ao banco de produ√ß√£o
# 3. Abre todas as URLs no navegador

param(
    [switch]$SkipBrowser  # Usar para n√£o abrir navegador automaticamente
)

$VPS_IP = "194.163.131.97"
$VPS_USER = "root"

Write-Host "üîß CONFIGURANDO AMBIENTE DE DEBUG COM PRODU√á√ÉO" -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Yellow

# Verificar se h√° containers rodando
Write-Host "üîç Verificando containers em execu√ß√£o..." -ForegroundColor Cyan
$containers = docker ps -q
if ($containers) {
    Write-Host "‚ö†Ô∏è  Containers detectados rodando. Parando..." -ForegroundColor Yellow
    docker-compose -f docker-compose.dev.yml down 2>$null
    docker-compose -f docker-compose.production-debug.yml down 2>$null
}

Write-Host "üìã PASSO 1: Preparando configura√ß√£o..." -ForegroundColor Cyan
# Copiar configura√ß√£o de produ√ß√£o
Copy-Item ".env.production" ".env" -Force
Write-Host "‚úÖ Arquivo .env configurado para produ√ß√£o" -ForegroundColor Green

Write-Host "üìã PASSO 2: Iniciando t√∫nel SSH..." -ForegroundColor Cyan
Write-Host "üîó Conectando a $VPS_IP..." -ForegroundColor White

# Iniciar t√∫nel SSH em background usando PowerShell Job
$sshJob = Start-Job -ScriptBlock {
    param($VPS_USER, $VPS_IP)
    ssh -L 3307:localhost:3306 -L 8081:localhost:80 -L 9001:localhost:9000 $VPS_USER@$VPS_IP
} -ArgumentList $VPS_USER, $VPS_IP

# Aguardar um pouco para o t√∫nel se estabelecer
Write-Host "‚è≥ Aguardando t√∫nel SSH se estabelecer..." -ForegroundColor Yellow
Start-Sleep -Seconds 5

Write-Host "üìã PASSO 3: Iniciando aplica√ß√£o local..." -ForegroundColor Cyan
# Iniciar aplica√ß√£o conectada √† produ√ß√£o
docker-compose -f docker-compose.production-debug.yml up -d

Write-Host "‚è≥ Aguardando servi√ßos iniciarem..." -ForegroundColor Yellow
Start-Sleep -Seconds 10

Write-Host "üéâ AMBIENTE CONFIGURADO!" -ForegroundColor Green
Write-Host "========================" -ForegroundColor Yellow

Write-Host "üìä ACESSOS DISPON√çVEIS:" -ForegroundColor Cyan
Write-Host "üåê Aplica√ß√£o Local (com banco prod): http://localhost:8082" -ForegroundColor White
Write-Host "üåê Aplica√ß√£o Produ√ß√£o Direta:        http://localhost:8081" -ForegroundColor White
Write-Host "üê≥ Portainer (Gest√£o Produ√ß√£o):      http://localhost:9001" -ForegroundColor White
Write-Host "üìä phpMyAdmin (Banco Produ√ß√£o):      http://localhost:8083" -ForegroundColor White

Write-Host ""
Write-Host "üîë CREDENCIAIS:" -ForegroundColor Cyan
Write-Host "Banco: busca / busca_password" -ForegroundColor White
Write-Host "Portainer: algoadmin / dsfkjh3h2j%21DW" -ForegroundColor White

Write-Host ""
Write-Host "‚ö†Ô∏è  IMPORTANTE:" -ForegroundColor Red
Write-Host "‚Ä¢ N√£o feche este terminal (SSH ativo)" -ForegroundColor Yellow
Write-Host "‚Ä¢ Use Ctrl+C para desconectar tudo" -ForegroundColor Yellow
Write-Host "‚Ä¢ Mudan√ßas na aplica√ß√£o local afetam s√≥ o desenvolvimento" -ForegroundColor Yellow
Write-Host "‚Ä¢ Dados do banco s√£o da PRODU√á√ÉO (cuidado!)" -ForegroundColor Red

if (-not $SkipBrowser) {
    Write-Host ""
    Write-Host "üåê Abrindo navegador..." -ForegroundColor Cyan
    Start-Process "http://localhost:8082"  # Aplica√ß√£o local
    Start-Sleep -Seconds 2
    Start-Process "http://localhost:9001"  # Portainer
    Start-Sleep -Seconds 2
    Start-Process "http://localhost:8083"  # phpMyAdmin
}

Write-Host ""
Write-Host "‚úÖ Tudo configurado! Pressione qualquer tecla para monitorar ou Ctrl+C para sair..." -ForegroundColor Green

# Aguardar input do usu√°rio ou manter ativo
try {
    while ($true) {
        Start-Sleep -Seconds 5
        # Verificar se t√∫nel SSH ainda est√° ativo
        $jobState = Get-Job -Id $sshJob.Id | Select-Object -ExpandProperty State
        if ($jobState -eq "Failed" -or $jobState -eq "Stopped") {
            Write-Host "‚ùå T√∫nel SSH desconectado!" -ForegroundColor Red
            break
        }
    }
} finally {
    Write-Host "üîÑ Limpando ambiente..." -ForegroundColor Yellow
    docker-compose -f docker-compose.production-debug.yml down
    Stop-Job -Id $sshJob.Id -ErrorAction SilentlyContinue
    Remove-Job -Id $sshJob.Id -ErrorAction SilentlyContinue
    Write-Host "‚úÖ Ambiente limpo!" -ForegroundColor Green
}