name: 📊 Backup Automático

on:
  schedule:
    # Todo dia às 02:00 UTC (23:00 horário de Brasília)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      backup_type:
        description: 'Tipo de backup'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - incremental
        - structure_only

jobs:
  backup:
    name: Backup do Banco de Dados
    runs-on: ubuntu-latest
    
    steps:
    - name: 🗃️ Realizar Backup
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |
          echo "🗃️ Iniciando backup automático..."
          
          # Criar diretório de backups se não existir
          mkdir -p /root/backups/daily
          
          # Definir tipo de backup
          BACKUP_TYPE="${{ github.event.inputs.backup_type || 'full' }}"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_FILE="/root/backups/daily/backup_${BACKUP_TYPE}_${TIMESTAMP}.sql"
          
          # Executar backup baseado no tipo
          case $BACKUP_TYPE in
            "full")
              echo "📦 Backup completo..."
              docker exec db_db mysqldump -u root -p${{ secrets.DB_ROOT_PASSWORD }} \
                --single-transaction --routines --triggers ${{ secrets.DB_NAME }} > "$BACKUP_FILE"
              ;;
            "incremental")
              echo "🔄 Backup incremental..."
              docker exec db_db mysqldump -u root -p${{ secrets.DB_ROOT_PASSWORD }} \
                --single-transaction --where="updated_at >= DATE_SUB(NOW(), INTERVAL 1 DAY)" \
                ${{ secrets.DB_NAME }} > "$BACKUP_FILE"
              ;;
            "structure_only")
              echo "🏗️ Backup apenas da estrutura..."
              docker exec db_db mysqldump -u root -p${{ secrets.DB_ROOT_PASSWORD }} \
                --no-data --routines --triggers ${{ secrets.DB_NAME }} > "$BACKUP_FILE"
              ;;
          esac
          
          # Verificar se backup foi criado
          if [ -f "$BACKUP_FILE" ]; then
            echo "✅ Backup criado com sucesso: $BACKUP_FILE"
            echo "📊 Tamanho do backup: $(du -h $BACKUP_FILE | cut -f1)"
            
            # Comprimir backup
            gzip "$BACKUP_FILE"
            echo "🗜️ Backup comprimido: ${BACKUP_FILE}.gz"
            
            # Limpeza de backups antigos (manter últimos 30 dias)
            find /root/backups/daily -name "backup_*.sql.gz" -mtime +30 -delete
            echo "🧹 Limpeza de backups antigos concluída"
            
            # Estatísticas
            echo "📈 Estatísticas de backups:"
            echo "Total de backups: $(ls -1 /root/backups/daily/backup_*.sql.gz | wc -l)"
            echo "Espaço usado: $(du -sh /root/backups/daily | cut -f1)"
            
          else
            echo "❌ Falha ao criar backup!"
            exit 1
          fi
          
    - name: 🔔 Notificar resultado
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Backup automático realizado com sucesso!"
          echo "📅 Data: $(date)"
          echo "🔧 Tipo: ${{ github.event.inputs.backup_type || 'full' }}"
        else
          echo "❌ Falha no backup automático!"
          echo "📅 Data: $(date)"
        fi