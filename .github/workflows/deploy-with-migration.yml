name: 🗃️ Deploy com Migração de Banco de Dados

on:
  push:
    branches: [ main, master ]
    paths:
      - 'migrations/**'
  workflow_dispatch:
    inputs:
      force_migration:
        description: 'Forçar execução de migrations'
        required: false
        default: false
        type: boolean

jobs:
  validate-migrations:
    name: Validar Migrations
    runs-on: ubuntu-latest
    outputs:
      has_migrations: ${{ steps.check.outputs.has_migrations }}
      migration_files: ${{ steps.check.outputs.migration_files }}
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: 🔍 Verificar mudanças em migrations
      id: check
      run: |
        if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
          echo "has_migrations=true" >> $GITHUB_OUTPUT
          echo "📋 Migrations encontradas:"
          ls -la migrations/
          echo "migration_files=$(ls migrations/ | tr '\n' ',')" >> $GITHUB_OUTPUT
        else
          echo "has_migrations=false" >> $GITHUB_OUTPUT
          echo "❌ Nenhuma migration encontrada"
        fi

  backup-production:
    name: Backup da Produção
    runs-on: ubuntu-latest
    needs: validate-migrations
    if: needs.validate-migrations.outputs.has_migrations == 'true' || github.event.inputs.force_migration == 'true'
    
    steps:
    - name: 🗃️ Backup do Banco de Dados
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |
          echo "🗃️ Iniciando backup da produção..."
          
          # Criar diretório de backups se não existir
          mkdir -p /root/backups
          
          # Nome do arquivo de backup
          BACKUP_FILE="/root/backups/backup_pre_migration_$(date +%Y%m%d_%H%M%S).sql"
          
          # Realizar backup
          docker exec db_db mysqldump -u root -p${{ secrets.DB_ROOT_PASSWORD }} ${{ secrets.DB_NAME }} > "$BACKUP_FILE"
          
          # Verificar se backup foi criado
          if [ -f "$BACKUP_FILE" ]; then
            echo "✅ Backup criado com sucesso: $BACKUP_FILE"
            echo "📊 Tamanho do backup: $(du -h $BACKUP_FILE | cut -f1)"
            
            # Manter apenas os últimos 10 backups
            cd /root/backups
            ls -t backup_pre_migration_*.sql | tail -n +11 | xargs rm -f || true
            
            echo "BACKUP_FILE=$BACKUP_FILE" >> $GITHUB_ENV
          else
            echo "❌ Falha ao criar backup!"
            exit 1
          fi

  deploy-with-migration:
    name: Deploy com Migration
    runs-on: ubuntu-latest
    needs: [validate-migrations, backup-production]
    if: needs.validate-migrations.outputs.has_migrations == 'true' || github.event.inputs.force_migration == 'true'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      
    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo, pdo_mysql, dom, filter, gd, iconv, json, mbstring, fileinfo
        
    - name: 📦 Instalar dependências
      run: composer install --prefer-dist --no-progress --no-suggest --no-dev --optimize-autoloader
      
    - name: 🗃️ Aplicar Migrations e Deploy
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script_stop: true
        script: |
          echo "🚀 Iniciando deploy com migration..."
          
          # Navegar para diretório do projeto
          cd /root/buscaprecos-main || exit 1
          
          # Backup do código atual
          echo "📦 Backup do código atual..."
          cp -r . ../backup_code_$(date +%Y%m%d_%H%M%S) || true
          
          # Atualizar código
          echo "⬇️ Atualizando código..."
          git fetch origin
          git reset --hard origin/main
          
          # Aplicar migrations
          echo "🗃️ Aplicando migrations..."
          if [ -d "migrations" ] && [ "$(ls -A migrations)" ]; then
            for migration in migrations/*.sql; do
              if [ -f "$migration" ]; then
                echo "📝 Aplicando: $migration"
                docker exec -i db_db mysql -u root -p${{ secrets.DB_ROOT_PASSWORD }} ${{ secrets.DB_NAME }} < "$migration"
                
                if [ $? -eq 0 ]; then
                  echo "✅ Migration aplicada: $migration"
                else
                  echo "❌ Falha ao aplicar migration: $migration"
                  echo "🔄 Iniciando rollback..."
                  
                  # Restaurar backup em caso de falha
                  LATEST_BACKUP=$(ls -t /root/backups/backup_pre_migration_*.sql | head -1)
                  if [ -f "$LATEST_BACKUP" ]; then
                    echo "📁 Restaurando backup: $LATEST_BACKUP"
                    docker exec -i db_db mysql -u root -p${{ secrets.DB_ROOT_PASSWORD }} ${{ secrets.DB_NAME }} < "$LATEST_BACKUP"
                    echo "🔄 Rollback do banco concluído"
                  fi
                  
                  exit 1
                fi
              fi
            done
          else
            echo "ℹ️ Nenhuma migration para aplicar"
          fi
          
          # Instalar dependências
          echo "📦 Instalando dependências..."
          composer install --no-dev --optimize-autoloader
          
          # Reiniciar serviços
          echo "🔄 Reiniciando serviços..."
          docker service update --force app_app
          docker service update --force webserver_webserver
          
          # Aguardar e verificar serviços
          echo "⏳ Aguardando inicialização dos serviços..."
          sleep 15
          
          # Verificar status
          echo "✅ Verificando status dos serviços..."
          docker service ls | grep -E "(app_app|webserver_webserver)"
          
          # Teste básico de conectividade
          echo "🔗 Testando conectividade..."
          if docker exec app_app php -r "echo 'PHP OK\n';"; then
            echo "✅ Aplicação PHP respondendo"
          else
            echo "❌ Problema com aplicação PHP"
            exit 1
          fi
          
          echo "🎉 Deploy com migration concluído com sucesso!"
          
    - name: ✅ Validação pós-deploy
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        port: ${{ secrets.SSH_PORT || 22 }}
        script: |
          echo "🔍 Iniciando validação pós-deploy..."
          
          # Verificar se serviços estão rodando
          SERVICES_OK=true
          
          if ! docker service ls | grep -q "app_app.*1/1"; then
            echo "❌ Serviço app_app não está rodando corretamente"
            SERVICES_OK=false
          fi
          
          if ! docker service ls | grep -q "webserver_webserver.*1/1"; then
            echo "❌ Serviço webserver_webserver não está rodando corretamente"
            SERVICES_OK=false
          fi
          
          # Verificar conectividade com banco
          if docker exec db_db mysql -u root -p${{ secrets.DB_ROOT_PASSWORD }} -e "SELECT 1" ${{ secrets.DB_NAME }} > /dev/null 2>&1; then
            echo "✅ Conectividade com banco OK"
          else
            echo "❌ Problema de conectividade com banco"
            SERVICES_OK=false
          fi
          
          if [ "$SERVICES_OK" = false ]; then
            echo "🚨 Falha na validação pós-deploy!"
            echo "📋 Logs dos serviços:"
            docker service logs app_app --tail 20
            docker service logs webserver_webserver --tail 20
            exit 1
          else
            echo "🎉 Validação pós-deploy bem-sucedida!"
          fi
          
    - name: 🔔 Notificar sucesso
      if: success()
      run: |
        echo "✅ Deploy com migration realizado com sucesso!"
        echo "🗃️ Migrations aplicadas: ${{ needs.validate-migrations.outputs.migration_files }}"
        echo "🌐 Aplicação disponível em produção"
        
    - name: 🚨 Notificar falha
      if: failure()
      run: |
        echo "❌ Deploy com migration falhou!"
        echo "🔄 Backup foi restaurado automaticamente"
        echo "📋 Verifique os logs para mais detalhes"